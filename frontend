import React, { useState, useEffect } from 'react';
import { Brain, Sword, Crown, ChevronRight, Shield, Wallet } from 'lucide-react';

const DzinePlatform = () => {
  const [activeTab, setActiveTab] = useState('create');
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [isConnected, setIsConnected] = useState(false);
  const [walletAddress, setWalletAddress] = useState('');

  const connectWallet = async () => {
    try {
      // Simplified wallet connection - replace with actual implementation
      setIsConnected(true);
      setWalletAddress('Connect Wallet');
    } catch (error) {
      console.error('Failed to connect wallet:', error);
    }
  };

  return (
    <div className="min-h-screen bg-gray-900">
      {/* Navigation */}
      <nav className="bg-gray-800 border-b border-gray-700">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center">
              <div className="text-white font-bold text-xl">DZINE</div>
              <div className="ml-10 flex items-baseline space-x-4">
                <NavButton 
                  active={activeTab === 'create'} 
                  onClick={() => setActiveTab('create')}
                  icon={<Brain className="w-4 h-4" />}
                  text="Create Agent"
                />
                <NavButton 
                  active={activeTab === 'battle'} 
                  onClick={() => setActiveTab('battle')}
                  icon={<Sword className="w-4 h-4" />}
                  text="Battle Arena"
                />
                <NavButton 
                  active={activeTab === 'tournament'} 
                  onClick={() => setActiveTab('tournament')}
                  icon={<Crown className="w-4 h-4" />}
                  text="Tournaments"
                />
              </div>
            </div>
            <div className="flex items-center">
              <button
                onClick={connectWallet}
                className="flex items-center px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700"
              >
                <Wallet className="w-4 h-4 mr-2" />
                {isConnected ? walletAddress.slice(0, 4) + '...' + walletAddress.slice(-4) : 'Connect Wallet'}
              </button>
            </div>
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {activeTab === 'create' && <CreateAgent onCreateClick={() => setShowCreateModal(true)} />}
        {activeTab === 'battle' && <BattleArena />}
        {activeTab === 'tournament' && <Tournaments />}
      </main>

      {/* Create Agent Modal */}
      {showCreateModal && (
        <CreateAgentModal onClose={() => setShowCreateModal(false)} />
      )}
    </div>
  );
};

const NavButton = ({ active, onClick, icon, text }) => (
  <button
    onClick={onClick}
    className={`flex items-center px-3 py-2 rounded-md text-sm font-medium ${
      active 
        ? 'bg-gray-900 text-white' 
        : 'text-gray-300 hover:bg-gray-700 hover:text-white'
    }`}
  >
    {icon}
    <span className="ml-2">{text}</span>
  </button>
);

const CreateAgent = ({ onCreateClick }) => (
  <div className="bg-gray-800 rounded-lg shadow p-6">
    <h2 className="text-2xl font-bold text-white mb-6">Create Your AI Agent</h2>
    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
      <AgentClass
        title="Berserker"
        description="High damage, aggressive combat style"
        icon={<Sword className="w-8 h-8 text-red-500" />}
        onClick={onCreateClick}
      />
      <AgentClass
        title="Guardian"
        description="Defensive specialist with high resilience"
        icon={<Shield className="w-8 h-8 text-blue-500" />}
        onClick={onCreateClick}
      />
      <AgentClass
        title="Tactician"
        description="Strategic combat with special abilities"
        icon={<Brain className="w-8 h-8 text-purple-500" />}
        onClick={onCreateClick}
      />
    </div>
  </div>
);

const AgentClass = ({ title, description, icon, onClick }) => (
  <div 
    onClick={onClick}
    className="bg-gray-700 rounded-lg p-6 cursor-pointer hover:bg-gray-600 transition-colors"
  >
    <div className="flex items-center justify-between mb-4">
      <div className="p-2 bg-gray-800 rounded-lg">{icon}</div>
      <ChevronRight className="w-5 h-5 text-gray-400" />
    </div>
    <h3 className="text-xl font-bold text-white mb-2">{title}</h3>
    <p className="text-gray-300">{description}</p>
  </div>
);

const CreateAgentModal = ({ onClose }) => {
  const [stats, setStats] = useState({
    attack: 50,
    defense: 50,
    speed: 50,
    special: 50,
  });

  const handleStatChange = (stat, value) => {
    setStats(prev => ({ ...prev, [stat]: value }));
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
      <div className="bg-gray-800 rounded-lg p-6 max-w-2xl w-full mx-4">
        <h2 className="text-2xl font-bold text-white mb-6">Customize Your Agent</h2>
        
        <div className="space-y-6">
          {Object.entries(stats).map(([stat, value]) => (
            <div key={stat}>
              <div className="flex justify-between mb-2">
                <label className="text-white capitalize">{stat}</label>
                <span className="text-gray-300">{value}</span>
              </div>
              <input
                type="range"
                min="0"
                max="100"
                value={value}
                onChange={(e) => handleStatChange(stat, parseInt(e.target.value))}
                className="w-full"
              />
            </div>
          ))}
        </div>

        <div className="mt-8 flex justify-end space-x-4">
          <button
            onClick={onClose}
            className="px-4 py-2 rounded bg-gray-700 text-white hover:bg-gray-600"
          >
            Cancel
          </button>
          <button
            className="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700"
          >
            Create Agent
          </button>
        </div>
      </div>
    </div>
  );
};

const BattleArena = () => {
  const [battles, setBattles] = useState([
    {
      id: 1,
      agent1: { name: "Berserker #1", health: 80 },
      agent2: { name: "Guardian #2", health: 90 },
      status: "active"
    }
  ]);

  return (
    <div className="space-y-6">
      <div className="bg-gray-800 rounded-lg shadow p-6">
        <h2 className="text-2xl font-bold text-white mb-6">Active Battles</h2>
        <div className="grid grid-cols-1 gap-6">
          {battles.map(battle => (
            <BattleCard key={battle.id} battle={battle} />
          ))}
        </div>
      </div>
    </div>
  );
};

const BattleCard = ({ battle }) => (
  <div className="bg-gray-700 rounded-lg p-6">
    <div className="flex items-center justify-between mb-4">
      <div className="flex items-center space-x-4">
        <div className="p-2 bg-gray-800 rounded-lg">
          <Sword className="w-6 h-6 text-red-500" />
        </div>
        <div>
          <h3 className="text-white font-bold">{battle.agent1.name}</h3>
          <div className="w-32 h-2 bg-gray-600 rounded-full mt-2">
            <div 
              className="h-full bg-red-500 rounded-full"
              style={{ width: `${battle.agent1.health}%` }}
            />
          </div>
        </div>
      </div>
      <div className="text-2xl font-bold text-gray-400">VS</div>
      <div className="flex items-center space-x-4">
        <div>
          <h3 className="text-white font-bold text-right">{battle.agent2.name}</h3>
          <div className="w-32 h-2 bg-gray-600 rounded-full mt-2">
            <div 
              className="h-full bg-blue-500 rounded-full"
              style={{ width: `${battle.agent2.health}%` }}
            />
          </div>
        </div>
        <div className="p-2 bg-gray-800 rounded-lg">
          <Shield className="w-6 h-6 text-blue-500" />
        </div>
      </div>
    </div>
  </div>
);

const Tournaments = () => {
  const [tournaments, setTournaments] = useState([
    {
      id: 1,
      name: "Weekly Championship",
      prizePool: 1000,
      participants: 16,
      maxParticipants: 32,
      startTime: new Date().getTime() + 86400000,
    }
  ]);

  return (
    <div className="space-y-6">
      <div className="bg-gray-800 rounded-lg shadow p-6">
        <h2 className="text-2xl font-bold text-white mb-6">Active Tournaments</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          {tournaments.map(tournament => (
            <TournamentCard key={tournament.id} tournament={tournament} />
          ))}
        </div>
      </div>
    </div>
  );
};

const TournamentCard = ({ tournament }) => (
  <div className="bg-gray-700 rounded-lg p-6">
    <div className="flex items-center justify-between mb-4">
      <div className="p-2 bg-gray-800 rounded-lg">
        <Crown className="w-6 h-6 text-yellow-500" />
      </div>
      <div className="text-yellow-500 font-bold">
        {tournament.prizePool} DZINE
      </div>
    </div>
    <h3 className="text-xl font-bold text-white mb-2">{tournament.name}</h3>
    <div className="text-gray-300 mb-4">
      Starts in {Math.floor((tournament.startTime - Date.now()) / 3600000)}h
    </div>
    <div className="flex justify-between items-center">
      <div className="text-gray-400">
        {tournament.participants}/{tournament.maxParticipants} Participants
      </div>
      <button className="px-4 py-2 rounded bg-blue-600 text-white hover:bg-blue-700">
        Join Tournament
      </button>
    </div>
  </div>
);

export default DzinePlatform;
